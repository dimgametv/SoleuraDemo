<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SSC English Vocabulary Quiz</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .quiz-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            max-width: 800px;
            width: 100%;
            overflow: hidden;
            animation: slideIn 0.8s ease-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .quiz-header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 30px;
            text-align: center;
            position: relative;
        }

        .sound-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1.2rem;
        }

        .sound-toggle:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }

        .sound-toggle.muted {
            opacity: 0.5;
        }

        .quiz-title {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 10px;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .quiz-subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .progress-section {
            padding: 20px 30px;
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 15px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4facfe, #00f2fe);
            border-radius: 4px;
            transition: width 0.5s ease;
            animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
            0% { background-position: -200px 0; }
            100% { background-position: 200px 0; }
        }

        .progress-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.9rem;
            color: #666;
        }

        .topic-badge {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
            animation: bounce 0.6s ease-out;
        }

        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-10px); }
            60% { transform: translateY(-5px); }
        }

        .question-section {
            padding: 40px 30px;
            min-height: 300px;
        }

        .question-text {
            font-size: 1.4rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 30px;
            line-height: 1.6;
            animation: fadeInUp 0.6s ease-out;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .options-grid {
            display: grid;
            gap: 15px;
            margin-bottom: 30px;
        }

        .option-btn {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 18px 24px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: left;
            position: relative;
            overflow: hidden;
        }

        .option-btn:hover {
            border-color: #4facfe;
            background: #f8f9ff;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(79, 172, 254, 0.2);
        }

        .option-btn.selected {
            background: linear-gradient(135deg, #4facfe, #00f2fe);
            color: white;
            border-color: #4facfe;
            animation: selectPulse 0.3s ease-out;
        }

        @keyframes selectPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }

        .option-btn.correct {
            background: linear-gradient(135deg, #56ab2f, #a8e6cf);
            border-color: #56ab2f;
            color: white;
            animation: correctPulse 0.6s ease-out;
        }

        @keyframes correctPulse {
            0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(86, 171, 47, 0.7); }
            50% { transform: scale(1.05); box-shadow: 0 0 0 10px rgba(86, 171, 47, 0); }
            100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(86, 171, 47, 0); }
        }

        .option-btn.incorrect {
            background: linear-gradient(135deg, #ff416c, #ff4b2b);
            border-color: #ff416c;
            color: white;
            animation: incorrectShake 0.6s ease-out;
        }

        @keyframes incorrectShake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
            20%, 40%, 60%, 80% { transform: translateX(5px); }
        }

        .controls {
            padding: 30px;
            background: #f8f9fa;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }

        .score-display {
            font-size: 1.2rem;
            font-weight: bold;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .score-number {
            background: linear-gradient(135deg, #4facfe, #00f2fe);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            animation: scoreUpdate 0.5s ease-out;
        }

        @keyframes scoreUpdate {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        .result-section {
            text-align: center;
            padding: 50px 30px;
        }

        .result-title {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 20px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: resultSlide 0.8s ease-out;
        }

        @keyframes resultSlide {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .result-score {
            font-size: 3rem;
            font-weight: bold;
            color: #4facfe;
            margin-bottom: 20px;
            animation: scoreReveal 1s ease-out 0.3s both;
        }

        @keyframes scoreReveal {
            from {
                opacity: 0;
                transform: scale(0.5);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }

        .result-message {
            font-size: 1.3rem;
            color: #666;
            margin-bottom: 30px;
            animation: messageSlide 0.8s ease-out 0.6s both;
        }

        @keyframes messageSlide {
            from {
                opacity: 0;
                transform: translateX(-30px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .topic-breakdown {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }

        .topic-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            animation: cardSlide 0.6s ease-out;
        }

        @keyframes cardSlide {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .topic-name {
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
        }

        .topic-score {
            font-size: 1.5rem;
            font-weight: bold;
            color: #4facfe;
        }

        .result-actions {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .topic-selection {
            padding: 40px 30px;
        }

        .selection-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .selection-title {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
        }

        .selection-subtitle {
            font-size: 1.1rem;
            color: #666;
        }

        .topics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            max-width: 1000px;
            margin: 0 auto;
        }

        .subtopics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .topic-card-select {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 16px;
            padding: 30px 25px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .topic-card-select:hover {
            border-color: #4facfe;
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(79, 172, 254, 0.2);
        }

        .topic-card-select.mixed-topic {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-color: #667eea;
        }

        .topic-card-select.mixed-topic:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 0 15px 40px rgba(102, 126, 234, 0.3);
        }

        .topic-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            animation: iconFloat 3s ease-in-out infinite;
        }

        @keyframes iconFloat {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }

        .topic-title {
            font-size: 1.4rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
        }

        .mixed-topic .topic-title {
            color: white;
        }

        .topic-description {
            font-size: 1rem;
            color: #666;
            margin-bottom: 15px;
            line-height: 1.5;
        }

        .mixed-topic .topic-description {
            color: rgba(255, 255, 255, 0.9);
        }

        .topic-stats {
            font-size: 0.9rem;
            color: #4facfe;
            font-weight: 600;
            padding: 8px 16px;
            background: rgba(79, 172, 254, 0.1);
            border-radius: 20px;
            display: inline-block;
        }

        .mixed-topic .topic-stats {
            color: rgba(255, 255, 255, 0.9);
            background: rgba(255, 255, 255, 0.2);
        }

        .subtopic-card {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 20px 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .subtopic-card:hover {
            border-color: #4facfe;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(79, 172, 254, 0.2);
        }

        .subtopic-number {
            font-size: 1.8rem;
            font-weight: bold;
            color: #4facfe;
            margin-bottom: 10px;
        }

        .subtopic-name {
            font-size: 1.1rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
        }

        .subtopic-range {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 12px;
        }

        .subtopic-difficulty {
            font-size: 0.8rem;
            padding: 4px 12px;
            border-radius: 15px;
            display: inline-block;
            font-weight: 600;
        }

        .difficulty-basic {
            background: #d4edda;
            color: #155724;
        }

        .difficulty-intermediate {
            background: #fff3cd;
            color: #856404;
        }

        .difficulty-advanced {
            background: #f8d7da;
            color: #721c24;
        }

        .hidden {
            display: none;
        }

        /* Authentication Styles */
        .auth-container {
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .auth-card {
            background: white;
            border-radius: 20px;
            box-shadow: 0 25px 50px rgba(0,0,0,0.15);
            max-width: 450px;
            width: 100%;
            overflow: hidden;
            animation: authSlideIn 0.8s ease-out;
        }

        @keyframes authSlideIn {
            from {
                opacity: 0;
                transform: translateY(30px) scale(0.95);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .auth-form {
            padding: 40px 35px;
        }

        .auth-header {
            text-align: center;
            margin-bottom: 35px;
        }

        .auth-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            animation: iconBounce 2s ease-in-out infinite;
        }

        @keyframes iconBounce {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-8px); }
        }

        .auth-title {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 8px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .auth-subtitle {
            font-size: 1rem;
            color: #666;
            line-height: 1.5;
        }

        .auth-form-content {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .input-group {
            position: relative;
            display: flex;
            align-items: center;
        }

        .input-icon {
            position: absolute;
            left: 15px;
            font-size: 1.2rem;
            color: #667eea;
            z-index: 2;
        }

        .input-group input {
            width: 100%;
            padding: 15px 15px 15px 50px;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .input-group input:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .password-toggle {
            position: absolute;
            right: 15px;
            cursor: pointer;
            font-size: 1.1rem;
            color: #666;
            transition: color 0.3s ease;
            z-index: 2;
        }

        .password-toggle:hover {
            color: #667eea;
        }

        .password-strength {
            margin-top: -10px;
            margin-bottom: 10px;
        }

        .strength-bar {
            width: 100%;
            height: 4px;
            background: #e9ecef;
            border-radius: 2px;
            overflow: hidden;
            margin-bottom: 5px;
        }

        .strength-fill {
            height: 100%;
            width: 0%;
            background: linear-gradient(90deg, #ff4757, #ffa502, #2ed573);
            border-radius: 2px;
            transition: width 0.3s ease;
        }

        .strength-text {
            font-size: 0.8rem;
            color: #666;
        }

        .auth-options {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 10px 0;
        }

        .remember-me {
            display: flex;
            align-items: center;
            cursor: pointer;
            font-size: 0.9rem;
            color: #666;
        }

        .remember-me input[type="checkbox"] {
            display: none;
        }

        .checkmark {
            width: 18px;
            height: 18px;
            border: 2px solid #ddd;
            border-radius: 4px;
            margin-right: 8px;
            position: relative;
            transition: all 0.3s ease;
        }

        .remember-me input[type="checkbox"]:checked + .checkmark {
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-color: #667eea;
        }

        .remember-me input[type="checkbox"]:checked + .checkmark::after {
            content: '✓';
            position: absolute;
            top: -2px;
            left: 2px;
            color: white;
            font-size: 12px;
            font-weight: bold;
        }

        .forgot-password {
            color: #667eea;
            text-decoration: none;
            font-size: 0.9rem;
            transition: color 0.3s ease;
        }

        .forgot-password:hover {
            color: #764ba2;
            text-decoration: underline;
        }

        .auth-btn {
            padding: 15px 30px;
            border: none;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .auth-btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .auth-btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .auth-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        .btn-loader {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }





        .auth-switch {
            text-align: center;
            margin-top: 20px;
            color: #666;
            font-size: 0.9rem;
        }

        .auth-switch a {
            color: #667eea;
            text-decoration: none;
            font-weight: 600;
            transition: color 0.3s ease;
        }

        .auth-switch a:hover {
            color: #764ba2;
            text-decoration: underline;
        }

        /* User Dashboard Styles */
        .user-dashboard {
            padding: 30px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: white;
            padding: 25px 30px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .user-avatar {
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: white;
        }

        .user-details h3 {
            margin: 0;
            font-size: 1.3rem;
            color: #333;
        }

        .user-details p {
            margin: 5px 0 0 0;
            color: #666;
            font-size: 0.9rem;
        }

        .dashboard-actions {
            display: flex;
            gap: 10px;
        }

        .dashboard-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            gap: 20px;
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-icon {
            font-size: 2.5rem;
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .stat-info {
            flex: 1;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }

        .recent-tests {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 20px;
        }

        .test-history {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .test-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: #f8f9fa;
            border-radius: 10px;
            border-left: 4px solid #667eea;
        }

        .test-info h4 {
            margin: 0 0 5px 0;
            color: #333;
            font-size: 1.1rem;
        }

        .test-info p {
            margin: 0;
            color: #666;
            font-size: 0.9rem;
        }

        .test-score {
            font-size: 1.2rem;
            font-weight: bold;
            color: #667eea;
        }

        .practice-section {
            text-align: center;
            margin-bottom: 30px;
        }

        .practice-btn {
            font-size: 1.2rem;
            padding: 18px 40px;
            border-radius: 15px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .practice-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
        }

        /* Mobile Responsive */
        @media (max-width: 480px) {
            .auth-container {
                padding: 15px;
            }

            .auth-card {
                max-width: 100%;
                border-radius: 15px;
            }

            .auth-form {
                padding: 30px 25px;
            }

            .auth-title {
                font-size: 1.6rem;
            }

            .auth-subtitle {
                font-size: 0.9rem;
            }

            .input-group input {
                padding: 12px 12px 12px 45px;
                font-size: 0.9rem;
            }

            .input-icon {
                left: 12px;
                font-size: 1.1rem;
            }

            .password-toggle {
                right: 12px;
            }



            .auth-options {
                flex-direction: column;
                gap: 15px;
                align-items: flex-start;
            }

            .dashboard-header {
                flex-direction: column;
                gap: 20px;
                text-align: center;
            }

            .dashboard-stats {
                grid-template-columns: 1fr;
            }

            .stat-card {
                padding: 20px;
            }

            .test-item {
                flex-direction: column;
                gap: 10px;
                text-align: center;
            }
        }

        @media (min-width: 481px) and (max-width: 768px) {
            .auth-card {
                max-width: 500px;
            }

            .dashboard-stats {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        /* Mobile First Responsive Design */
        @media (max-width: 480px) {
            body {
                padding: 10px;
            }
            
            .quiz-container {
                border-radius: 15px;
                max-width: 100%;
            }
            
            .quiz-header {
                padding: 20px 15px;
            }

            .sound-toggle {
                top: 15px;
                right: 15px;
                width: 40px;
                height: 40px;
                font-size: 1rem;
            }
            
            .quiz-title {
                font-size: 1.8rem;
                margin-bottom: 8px;
            }
            
            .quiz-subtitle {
                font-size: 0.9rem;
            }
            
            .progress-section {
                padding: 15px 20px;
            }
            
            .progress-info {
                flex-direction: column;
                gap: 10px;
                align-items: flex-start;
            }
            
            .topic-badge {
                align-self: flex-end;
                font-size: 0.7rem;
                padding: 6px 12px;
            }
            
            .question-section {
                padding: 25px 20px;
                min-height: 250px;
            }
            
            .question-text {
                font-size: 1.1rem;
                margin-bottom: 25px;
                line-height: 1.5;
            }
            
            .options-grid {
                gap: 12px;
                margin-bottom: 25px;
            }
            
            .option-btn {
                padding: 15px 18px;
                font-size: 0.95rem;
                border-radius: 10px;
                min-height: 50px;
                display: flex;
                align-items: center;
            }
            
            .controls {
                padding: 20px;
                flex-direction: column;
                gap: 15px;
            }
            
            .score-display {
                font-size: 1.1rem;
                order: 1;
            }
            
            .controls > div:last-child {
                display: flex;
                flex-wrap: wrap;
                gap: 10px;
                justify-content: center;
                order: 2;
            }
            
            .btn {
                padding: 10px 20px;
                font-size: 0.9rem;
                min-width: 100px;
            }
            
            .topic-selection, .subtopic-selection {
                padding: 25px 20px;
            }
            
            .selection-title {
                font-size: 1.6rem;
                margin-bottom: 8px;
            }
            
            .selection-subtitle {
                font-size: 1rem;
                margin-bottom: 25px;
            }
            
            .topics-grid {
                grid-template-columns: 1fr;
                gap: 20px;
                margin-top: 20px;
            }
            
            .subtopics-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 15px;
                margin-top: 20px;
            }
            
            .topic-card-select {
                padding: 25px 20px;
                border-radius: 12px;
            }
            
            .topic-icon {
                font-size: 2.5rem;
                margin-bottom: 12px;
            }
            
            .topic-title {
                font-size: 1.2rem;
                margin-bottom: 8px;
            }
            
            .topic-description {
                font-size: 0.9rem;
                margin-bottom: 12px;
            }
            
            .topic-stats {
                font-size: 0.8rem;
                padding: 6px 12px;
            }
            
            .subtopic-card {
                padding: 15px 12px;
                border-radius: 10px;
            }
            
            .subtopic-number {
                font-size: 1.4rem;
                margin-bottom: 8px;
            }
            
            .subtopic-name {
                font-size: 0.95rem;
                margin-bottom: 6px;
            }
            
            .subtopic-range {
                font-size: 0.8rem;
                margin-bottom: 10px;
            }
            
            .subtopic-difficulty {
                font-size: 0.75rem;
                padding: 3px 10px;
            }
            
            .result-section {
                padding: 30px 20px;
            }
            
            .result-title {
                font-size: 2rem;
                margin-bottom: 15px;
            }
            
            .result-score {
                font-size: 2.5rem;
                margin-bottom: 15px;
            }
            
            .result-message {
                font-size: 1.1rem;
                margin-bottom: 25px;
            }
            
            .topic-breakdown {
                grid-template-columns: 1fr;
                gap: 15px;
                margin: 25px 0;
            }
            
            .topic-card {
                padding: 15px;
            }
            
            .topic-name {
                font-size: 0.9rem;
                margin-bottom: 8px;
            }
            
            .topic-score {
                font-size: 1.3rem;
            }
            
            .result-actions {
                flex-direction: column;
                gap: 12px;
                align-items: stretch;
            }
            
            .result-actions .btn {
                width: 100%;
                padding: 12px 20px;
            }
        }

        /* Tablet Portrait */
        @media (min-width: 481px) and (max-width: 768px) {
            body {
                padding: 15px;
            }
            
            .quiz-container {
                border-radius: 18px;
            }
            
            .quiz-header {
                padding: 25px 20px;
            }
            
            .quiz-title {
                font-size: 2.2rem;
            }
            
            .quiz-subtitle {
                font-size: 1rem;
            }
            
            .progress-section {
                padding: 18px 25px;
            }
            
            .question-section {
                padding: 35px 25px;
            }
            
            .question-text {
                font-size: 1.3rem;
            }
            
            .option-btn {
                padding: 16px 22px;
                font-size: 1.05rem;
            }
            
            .controls {
                padding: 25px;
                flex-wrap: wrap;
                justify-content: space-between;
            }
            
            .score-display {
                flex-basis: 100%;
                justify-content: center;
                margin-bottom: 15px;
            }
            
            .topics-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 22px;
            }
            
            .subtopics-grid {
                grid-template-columns: repeat(3, 1fr);
                gap: 18px;
            }
            
            .topic-card-select {
                padding: 28px 22px;
            }
            
            .topic-icon {
                font-size: 2.8rem;
            }
            
            .topic-title {
                font-size: 1.3rem;
            }
            
            .result-section {
                padding: 40px 25px;
            }
            
            .topic-breakdown {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        /* Tablet Landscape & Small Desktop */
        @media (min-width: 769px) and (max-width: 1024px) {
            .quiz-container {
                max-width: 900px;
            }
            
            .topics-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 25px;
            }
            
            .subtopics-grid {
                grid-template-columns: repeat(4, 1fr);
                gap: 20px;
            }
            
            .topic-breakdown {
                grid-template-columns: repeat(3, 1fr);
            }
        }

        /* Large Desktop */
        @media (min-width: 1025px) {
            .quiz-container {
                max-width: 1000px;
            }
            
            .topics-grid {
                grid-template-columns: repeat(3, 1fr);
            }
            
            .subtopics-grid {
                grid-template-columns: repeat(5, 1fr);
            }
        }

        /* Touch-friendly improvements */
        @media (hover: none) and (pointer: coarse) {
            .option-btn {
                min-height: 55px;
                padding: 18px 20px;
            }
            
            .btn {
                min-height: 48px;
                padding: 14px 25px;
            }
            
            .topic-card-select, .subtopic-card {
                min-height: 120px;
                display: flex;
                flex-direction: column;
                justify-content: center;
            }
        }

        /* Landscape orientation adjustments */
        @media (max-height: 500px) and (orientation: landscape) {
            .quiz-header {
                padding: 15px 20px;
            }
            
            .quiz-title {
                font-size: 1.8rem;
                margin-bottom: 5px;
            }
            
            .quiz-subtitle {
                font-size: 0.9rem;
            }
            
            .question-section {
                padding: 20px 25px;
                min-height: 200px;
            }
            
            .question-text {
                font-size: 1.1rem;
                margin-bottom: 20px;
            }
            
            .options-grid {
                gap: 10px;
                margin-bottom: 20px;
            }
            
            .option-btn {
                padding: 12px 18px;
                font-size: 0.95rem;
            }
            
            .controls {
                padding: 15px 25px;
            }
            
            .result-section {
                padding: 25px 20px;
            }
            
            .result-title {
                font-size: 1.8rem;
                margin-bottom: 10px;
            }
            
            .result-score {
                font-size: 2.2rem;
                margin-bottom: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="quiz-container">
        <div class="quiz-header">
            <div class="sound-toggle" id="sound-toggle" onclick="toggleSound()" title="Toggle Sound Effects">
                🔊
            </div>
            <h1 class="quiz-title">🎯 SSC English Vocabulary Quiz</h1>
            <p class="quiz-subtitle">Previous Years Questions (2017-2025) • 10,000 Unique Questions</p>
        </div>

        <!-- Authentication Screens -->
        <div id="auth-container" class="auth-container">
            <div class="auth-card">
                <!-- Login Form -->
                <div id="login-form" class="auth-form">
                    <div class="auth-header">
                        <div class="auth-icon">👤</div>
                        <h2 class="auth-title">Welcome Back!</h2>
                        <p class="auth-subtitle">Sign in to continue your learning journey</p>
                    </div>
                    
                    <form class="auth-form-content" onsubmit="handleLogin(event)">
                        <div class="input-group">
                            <div class="input-icon">📧</div>
                            <input type="email" id="login-email" placeholder="Enter your email" required>
                        </div>
                        
                        <div class="input-group">
                            <div class="input-icon">🔒</div>
                            <input type="password" id="login-password" placeholder="Enter your password" required>
                            <div class="password-toggle" onclick="togglePassword('login-password')">👁️</div>
                        </div>
                        
                        <div class="auth-options">
                            <label class="remember-me">
                                <input type="checkbox" id="remember-me">
                                <span class="checkmark"></span>
                                Remember me
                            </label>
                            <a href="#" class="forgot-password" onclick="showForgotPassword()">Forgot Password?</a>
                        </div>
                        
                        <button type="submit" class="auth-btn auth-btn-primary">
                            <span class="btn-text">Sign In</span>
                            <div class="btn-loader hidden">
                                <div class="spinner"></div>
                            </div>
                        </button>
                        

                        

                        
                        <div class="auth-switch">
                            Don't have an account? 
                            <a href="#" onclick="showSignup()">Sign up here</a>
                        </div>
                    </form>
                </div>
                
                <!-- Signup Form -->
                <div id="signup-form" class="auth-form hidden">
                    <div class="auth-header">
                        <div class="auth-icon">🎓</div>
                        <h2 class="auth-title">Join Our Community!</h2>
                        <p class="auth-subtitle">Create your account to start learning</p>
                    </div>
                    
                    <form class="auth-form-content" onsubmit="handleSignup(event)">
                        <div class="input-group">
                            <div class="input-icon">👤</div>
                            <input type="text" id="signup-name" placeholder="Full Name" required>
                        </div>
                        
                        <div class="input-group">
                            <div class="input-icon">📧</div>
                            <input type="email" id="signup-email" placeholder="Email Address" required>
                        </div>
                        
                        <div class="input-group">
                            <div class="input-icon">🔒</div>
                            <input type="password" id="signup-password" placeholder="Create Password" required>
                            <div class="password-toggle" onclick="togglePassword('signup-password')">👁️</div>
                        </div>
                        
                        <div class="input-group">
                            <div class="input-icon">🔒</div>
                            <input type="password" id="confirm-password" placeholder="Confirm Password" required>
                            <div class="password-toggle" onclick="togglePassword('confirm-password')">👁️</div>
                        </div>
                        
                        <div class="password-strength" id="password-strength">
                            <div class="strength-bar">
                                <div class="strength-fill"></div>
                            </div>
                            <span class="strength-text">Password strength</span>
                        </div>
                        
                        <div class="auth-options">
                            <label class="remember-me">
                                <input type="checkbox" id="terms-agree" required>
                                <span class="checkmark"></span>
                                I agree to the <a href="#" onclick="showTerms()">Terms & Conditions</a>
                            </label>
                        </div>
                        
                        <button type="submit" class="auth-btn auth-btn-primary">
                            <span class="btn-text">Create Account</span>
                            <div class="btn-loader hidden">
                                <div class="spinner"></div>
                            </div>
                        </button>
                        

                        

                        
                        <div class="auth-switch">
                            Already have an account? 
                            <a href="#" onclick="showLogin()">Sign in here</a>
                        </div>
                    </form>
                </div>
                
                <!-- Forgot Password Form -->
                <div id="forgot-password-form" class="auth-form hidden">
                    <div class="auth-header">
                        <div class="auth-icon">🔑</div>
                        <h2 class="auth-title">Reset Password</h2>
                        <p class="auth-subtitle">Enter your email to receive reset instructions</p>
                    </div>
                    
                    <form class="auth-form-content" onsubmit="handleForgotPassword(event)">
                        <div class="input-group">
                            <div class="input-icon">📧</div>
                            <input type="email" id="forgot-email" placeholder="Enter your email" required>
                        </div>
                        
                        <button type="submit" class="auth-btn auth-btn-primary">
                            <span class="btn-text">Send Reset Link</span>
                            <div class="btn-loader hidden">
                                <div class="spinner"></div>
                            </div>
                        </button>
                        
                        <div class="auth-switch">
                            Remember your password? 
                            <a href="#" onclick="showLogin()">Sign in here</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- User Dashboard -->
        <div id="user-dashboard" class="user-dashboard hidden">
            <div class="dashboard-header">
                <div class="user-info">
                    <div class="user-avatar">👤</div>
                    <div class="user-details">
                        <h3 class="user-name" id="user-name">John Doe</h3>
                        <p class="user-email" id="user-email">john@example.com</p>
                    </div>
                </div>
                <div class="dashboard-actions">
                    <button class="btn btn-secondary" onclick="showProfile()">Profile</button>
                    <button class="btn btn-secondary" onclick="logout()">Logout</button>
                </div>
            </div>
            
            <div class="dashboard-stats">
                <div class="stat-card">
                    <div class="stat-icon">📊</div>
                    <div class="stat-info">
                        <div class="stat-number" id="total-tests">0</div>
                        <div class="stat-label">Tests Taken</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">🎯</div>
                    <div class="stat-info">
                        <div class="stat-number" id="avg-score">0%</div>
                        <div class="stat-label">Average Score</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">🏆</div>
                    <div class="stat-info">
                        <div class="stat-number" id="best-score">0%</div>
                        <div class="stat-label">Best Score</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">📈</div>
                    <div class="stat-info">
                        <div class="stat-number" id="streak">0</div>
                        <div class="stat-label">Day Streak</div>
                    </div>
                </div>
            </div>
            
            <div class="practice-section">
                <button class="btn btn-primary practice-btn" onclick="startPractice()">
                    🎯 Start Practice
                </button>
            </div>
            
            <div class="recent-tests">
                <h3 class="section-title">Recent Test Results</h3>
                <div class="test-history" id="test-history">
                    <!-- Test history will be populated here -->
                </div>
            </div>
        </div>

        <div id="topic-selection" class="topic-selection hidden">
            <div class="selection-header">
                <h2 class="selection-title">Choose Your Practice Topic</h2>
                <p class="selection-subtitle">Select a specific area to focus on or practice all topics together</p>
            </div>
            
            <div class="topics-grid">
                <div class="topic-card-select" onclick="showSubtopics('Synonyms')">
                    <div class="topic-icon">📚</div>
                    <h3 class="topic-title">Synonyms</h3>
                    <p class="topic-description">2,000 questions in 40 sets of 50 questions each</p>
                    <div class="topic-stats">Advanced vocabulary • SSC Pattern</div>
                </div>
                
                <div class="topic-card-select" onclick="showSubtopics('Antonyms')">
                    <div class="topic-icon">🔄</div>
                    <h3 class="topic-title">Antonyms</h3>
                    <p class="topic-description">2,000 questions in 40 sets of 50 questions each</p>
                    <div class="topic-stats">Opposite words • Competitive exams</div>
                </div>
                
                <div class="topic-card-select" onclick="showSubtopics('Idioms')">
                    <div class="topic-icon">💬</div>
                    <h3 class="topic-title">Idioms & Phrases</h3>
                    <p class="topic-description">2,000 questions in 40 sets of 50 questions each</p>
                    <div class="topic-stats">Phrases • Real meanings</div>
                </div>
                
                <div class="topic-card-select" onclick="showSubtopics('One Word Substitutions')">
                    <div class="topic-icon">📝</div>
                    <h3 class="topic-title">One Word Substitutions</h3>
                    <p class="topic-description">2,000 questions in 40 sets of 50 questions each</p>
                    <div class="topic-stats">Technical terms • Definitions</div>
                </div>
                
                <div class="topic-card-select" onclick="showSubtopics('Spellings')">
                    <div class="topic-icon">✍️</div>
                    <h3 class="topic-title">Spellings</h3>
                    <p class="topic-description">2,000 questions in 40 sets of 50 questions each</p>
                    <div class="topic-stats">Correct spelling • Error patterns</div>
                </div>
                
                <div class="topic-card-select mixed-topic" onclick="startQuiz('Mixed', 0, 10000)">
                    <div class="topic-icon">🎯</div>
                    <h3 class="topic-title">Mixed Practice</h3>
                    <p class="topic-description">All 10,000 questions from every topic</p>
                    <div class="topic-stats">Complete practice • All areas</div>
                </div>
            </div>
        </div>

        <div id="subtopic-selection" class="topic-selection hidden">
            <div class="selection-header">
                <h2 class="selection-title" id="subtopic-title">Choose Practice Set</h2>
                <p class="selection-subtitle">Each set contains 50 carefully selected questions</p>
                <button class="btn btn-secondary" onclick="backToMainTopics()" style="margin-top: 15px;">← Back to Topics</button>
            </div>
            
            <div class="subtopics-grid" id="subtopics-grid">
                <!-- Subtopic cards will be populated by JavaScript -->
            </div>
        </div>

        <div id="quiz-content" class="hidden">
            <div class="progress-section">
                <div class="progress-bar">
                    <div class="progress-fill" id="progress-fill" style="width: 1%"></div>
                </div>
                <div class="progress-info">
                    <span id="question-counter">Question 1 of 2,000</span>
                    <span class="topic-badge" id="current-topic">Synonyms</span>
                </div>
            </div>

            <div class="question-section">
                <h2 class="question-text" id="question-text">Loading question...</h2>
                <div class="options-grid" id="options-grid">
                    <!-- Options will be populated by JavaScript -->
                </div>
            </div>

            <div class="controls">
                <div class="score-display">
                    Score: <span class="score-number" id="score-display">0/0</span>
                </div>
                <div>
                    <button class="btn btn-secondary" id="back-to-topics" onclick="backToTopics()">← Topics</button>
                    <button class="btn btn-secondary" id="prev-btn" onclick="previousQuestion()">← Previous</button>
                    <button class="btn btn-primary" id="next-btn" onclick="nextQuestion()">Next →</button>
                </div>
            </div>
        </div>

        <div id="result-section" class="result-section hidden">
            <h2 class="result-title">🎉 Quiz Completed!</h2>
            <div class="result-score" id="final-score">0/0</div>
            <p class="result-message" id="result-message">Great job!</p>
            
            <div class="topic-breakdown" id="topic-breakdown">
                <!-- Topic scores will be populated by JavaScript -->
            </div>
            
            <div class="result-actions">
                <button class="btn btn-primary" onclick="backToDashboard()">📊 Back to Dashboard</button>
                <button class="btn btn-secondary" onclick="restartQuiz()">🔄 Choose New Topic</button>
                <button class="btn btn-secondary" onclick="startQuiz(selectedTopic)">↻ Retry Same Topic</button>
            </div>
        </div>
    </div>

    <script>
        // Sound System using Web Audio API
        class SoundSystem {
            constructor() {
                this.audioContext = null;
                this.soundEnabled = true;
                this.initAudioContext();
            }

            initAudioContext() {
                try {
                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                } catch (e) {
                    console.log('Web Audio API not supported');
                    this.soundEnabled = false;
                }
            }

            // Create correct answer sound (pleasant chime)
            playCorrectSound() {
                if (!this.soundEnabled || !this.audioContext) return;

                const oscillator1 = this.audioContext.createOscillator();
                const oscillator2 = this.audioContext.createOscillator();
                const gainNode = this.audioContext.createGain();

                // Create harmonious frequencies
                oscillator1.frequency.setValueAtTime(523.25, this.audioContext.currentTime); // C5
                oscillator2.frequency.setValueAtTime(659.25, this.audioContext.currentTime); // E5

                oscillator1.connect(gainNode);
                oscillator2.connect(gainNode);
                gainNode.connect(this.audioContext.destination);

                // Envelope for pleasant sound
                gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
                gainNode.gain.linearRampToValueAtTime(0.3, this.audioContext.currentTime + 0.1);
                gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.8);

                oscillator1.start(this.audioContext.currentTime);
                oscillator2.start(this.audioContext.currentTime);
                oscillator1.stop(this.audioContext.currentTime + 0.8);
                oscillator2.stop(this.audioContext.currentTime + 0.8);
            }

            // Create incorrect answer sound (gentle buzz)
            playIncorrectSound() {
                if (!this.soundEnabled || !this.audioContext) return;

                const oscillator = this.audioContext.createOscillator();
                const gainNode = this.audioContext.createGain();

                oscillator.frequency.setValueAtTime(200, this.audioContext.currentTime);
                oscillator.frequency.linearRampToValueAtTime(150, this.audioContext.currentTime + 0.3);

                oscillator.connect(gainNode);
                gainNode.connect(this.audioContext.destination);

                // Envelope for buzz sound
                gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
                gainNode.gain.linearRampToValueAtTime(0.2, this.audioContext.currentTime + 0.05);
                gainNode.gain.linearRampToValueAtTime(0.1, this.audioContext.currentTime + 0.15);
                gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.3);

                oscillator.start(this.audioContext.currentTime);
                oscillator.stop(this.audioContext.currentTime + 0.3);
            }

            // Create button click sound
            playClickSound() {
                if (!this.soundEnabled || !this.audioContext) return;

                const oscillator = this.audioContext.createOscillator();
                const gainNode = this.audioContext.createGain();

                oscillator.frequency.setValueAtTime(800, this.audioContext.currentTime);
                oscillator.frequency.exponentialRampToValueAtTime(400, this.audioContext.currentTime + 0.1);

                oscillator.connect(gainNode);
                gainNode.connect(this.audioContext.destination);

                gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
                gainNode.gain.linearRampToValueAtTime(0.1, this.audioContext.currentTime + 0.01);
                gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.1);

                oscillator.start(this.audioContext.currentTime);
                oscillator.stop(this.audioContext.currentTime + 0.1);
            }

            // Create completion sound (victory fanfare)
            playCompletionSound() {
                if (!this.soundEnabled || !this.audioContext) return;

                const notes = [523.25, 659.25, 783.99, 1046.50]; // C5, E5, G5, C6
                
                notes.forEach((freq, index) => {
                    setTimeout(() => {
                        const oscillator = this.audioContext.createOscillator();
                        const gainNode = this.audioContext.createGain();

                        oscillator.frequency.setValueAtTime(freq, this.audioContext.currentTime);
                        oscillator.connect(gainNode);
                        gainNode.connect(this.audioContext.destination);

                        gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
                        gainNode.gain.linearRampToValueAtTime(0.2, this.audioContext.currentTime + 0.1);
                        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.4);

                        oscillator.start(this.audioContext.currentTime);
                        oscillator.stop(this.audioContext.currentTime + 0.4);
                    }, index * 150);
                });
            }

            toggle() {
                this.soundEnabled = !this.soundEnabled;
                const toggle = document.getElementById('sound-toggle');
                toggle.textContent = this.soundEnabled ? '🔊' : '🔇';
                toggle.classList.toggle('muted', !this.soundEnabled);
                
                // Resume audio context if needed
                if (this.soundEnabled && this.audioContext && this.audioContext.state === 'suspended') {
                    this.audioContext.resume();
                }
            }
        }

        // Initialize sound system
        const soundSystem = new SoundSystem();

        function toggleSound() {
            soundSystem.toggle();
            soundSystem.playClickSound();
        }

        // Authentication System
        let currentUser = null;
        let userStats = {
            totalTests: 0,
            totalScore: 0,
            bestScore: 0,
            streak: 0,
            testHistory: []
        };

        // Check if user is logged in on page load
        document.addEventListener('DOMContentLoaded', function() {
            const savedUser = localStorage.getItem('currentUser');
            if (savedUser) {
                currentUser = JSON.parse(savedUser);
                const savedStats = localStorage.getItem(`userStats_${currentUser.email}`);
                if (savedStats) {
                    userStats = JSON.parse(savedStats);
                }
                // Hide auth container completely when user is logged in
                document.getElementById('auth-container').style.display = 'none';
                showDashboard();
            } else {
                document.getElementById('auth-container').style.display = 'flex';
                showAuthContainer();
            }
        });

        function showAuthContainer() {
            document.getElementById('auth-container').classList.remove('hidden');
            document.getElementById('user-dashboard').classList.add('hidden');
            document.getElementById('topic-selection').classList.add('hidden');
            document.getElementById('quiz-content').classList.add('hidden');
            document.getElementById('result-section').classList.add('hidden');
            document.getElementById('subtopic-selection').classList.add('hidden');
        }

        function showDashboard() {
            document.getElementById('auth-container').classList.add('hidden');
            document.getElementById('user-dashboard').classList.remove('hidden');
            document.getElementById('topic-selection').classList.add('hidden');
            
            // Update user info
            document.getElementById('user-name').textContent = currentUser.name;
            document.getElementById('user-email').textContent = currentUser.email;
            
            // Update stats
            document.getElementById('total-tests').textContent = userStats.totalTests;
            const avgScore = userStats.totalTests > 0 ? Math.round(userStats.totalScore / userStats.totalTests) : 0;
            document.getElementById('avg-score').textContent = avgScore + '%';
            document.getElementById('best-score').textContent = userStats.bestScore + '%';
            document.getElementById('streak').textContent = userStats.streak;
            
            // Update test history
            updateTestHistory();
        }

        function updateTestHistory() {
            const historyContainer = document.getElementById('test-history');
            historyContainer.innerHTML = '';
            
            if (userStats.testHistory.length === 0) {
                historyContainer.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">No tests taken yet. Start practicing to see your progress!</p>';
                return;
            }
            
            // Show last 5 tests
            const recentTests = userStats.testHistory.slice(-5).reverse();
            recentTests.forEach(test => {
                const testItem = document.createElement('div');
                testItem.className = 'test-item';
                testItem.innerHTML = `
                    <div class="test-info">
                        <h4>${test.topic}</h4>
                        <p>${new Date(test.date).toLocaleDateString()} • ${test.questionsAnswered} questions</p>
                    </div>
                    <div class="test-score">${test.percentage}%</div>
                `;
                historyContainer.appendChild(testItem);
            });
        }

        function showLogin() {
            soundSystem.playClickSound();
            document.getElementById('login-form').classList.remove('hidden');
            document.getElementById('signup-form').classList.add('hidden');
            document.getElementById('forgot-password-form').classList.add('hidden');
        }

        function showSignup() {
            soundSystem.playClickSound();
            document.getElementById('signup-form').classList.remove('hidden');
            document.getElementById('login-form').classList.add('hidden');
            document.getElementById('forgot-password-form').classList.add('hidden');
        }

        function showForgotPassword() {
            soundSystem.playClickSound();
            document.getElementById('forgot-password-form').classList.remove('hidden');
            document.getElementById('login-form').classList.add('hidden');
            document.getElementById('signup-form').classList.add('hidden');
        }

        function togglePassword(inputId) {
            soundSystem.playClickSound();
            const input = document.getElementById(inputId);
            const toggle = input.nextElementSibling;
            
            if (input.type === 'password') {
                input.type = 'text';
                toggle.textContent = '🙈';
            } else {
                input.type = 'password';
                toggle.textContent = '👁️';
            }
        }

        // Password strength checker
        document.addEventListener('DOMContentLoaded', function() {
            const signupPassword = document.getElementById('signup-password');
            if (signupPassword) {
                signupPassword.addEventListener('input', checkPasswordStrength);
            }
        });

        function checkPasswordStrength() {
            const password = document.getElementById('signup-password').value;
            const strengthBar = document.querySelector('.strength-fill');
            const strengthText = document.querySelector('.strength-text');
            
            let strength = 0;
            let text = 'Very Weak';
            
            if (password.length >= 8) strength += 20;
            if (password.match(/[a-z]/)) strength += 20;
            if (password.match(/[A-Z]/)) strength += 20;
            if (password.match(/[0-9]/)) strength += 20;
            if (password.match(/[^a-zA-Z0-9]/)) strength += 20;
            
            if (strength >= 80) text = 'Very Strong';
            else if (strength >= 60) text = 'Strong';
            else if (strength >= 40) text = 'Medium';
            else if (strength >= 20) text = 'Weak';
            
            strengthBar.style.width = strength + '%';
            strengthText.textContent = `Password strength: ${text}`;
        }

        async function handleLogin(event) {
            event.preventDefault();
            soundSystem.playClickSound();
            
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            const rememberMe = document.getElementById('remember-me').checked;
            
            // Show loading
            const btn = event.target.querySelector('.auth-btn');
            const btnText = btn.querySelector('.btn-text');
            const btnLoader = btn.querySelector('.btn-loader');
            
            btn.disabled = true;
            btnText.classList.add('hidden');
            btnLoader.classList.remove('hidden');
            
            // Simulate API call
            setTimeout(() => {
                // Demo login - in real app, validate with Firebase
                if (email && password) {
                    currentUser = {
                        name: email.split('@')[0].charAt(0).toUpperCase() + email.split('@')[0].slice(1),
                        email: email,
                        loginTime: new Date().toISOString()
                    };
                    
                    // Load user stats
                    const savedStats = localStorage.getItem(`userStats_${email}`);
                    if (savedStats) {
                        userStats = JSON.parse(savedStats);
                    } else {
                        userStats = {
                            totalTests: 0,
                            totalScore: 0,
                            bestScore: 0,
                            streak: 0,
                            testHistory: []
                        };
                    }
                    
                    localStorage.setItem('currentUser', JSON.stringify(currentUser));
                    showNotification('Login successful! Welcome back!', 'success');
                    showDashboard();
                } else {
                    showNotification('Please enter valid credentials', 'error');
                }
                
                // Reset button
                btn.disabled = false;
                btnText.classList.remove('hidden');
                btnLoader.classList.add('hidden');
            }, 1500);
        }

        async function handleSignup(event) {
            event.preventDefault();
            soundSystem.playClickSound();
            
            const name = document.getElementById('signup-name').value;
            const email = document.getElementById('signup-email').value;
            const password = document.getElementById('signup-password').value;
            const confirmPassword = document.getElementById('confirm-password').value;
            const termsAgree = document.getElementById('terms-agree').checked;
            
            if (password !== confirmPassword) {
                showNotification('Passwords do not match!', 'error');
                return;
            }
            
            if (!termsAgree) {
                showNotification('Please agree to the terms and conditions', 'error');
                return;
            }
            
            // Show loading
            const btn = event.target.querySelector('.auth-btn');
            const btnText = btn.querySelector('.btn-text');
            const btnLoader = btn.querySelector('.btn-loader');
            
            btn.disabled = true;
            btnText.classList.add('hidden');
            btnLoader.classList.remove('hidden');
            
            // Simulate API call
            setTimeout(() => {
                // Demo signup - in real app, create user with Firebase
                currentUser = {
                    name: name,
                    email: email,
                    signupTime: new Date().toISOString()
                };
                
                userStats = {
                    totalTests: 0,
                    totalScore: 0,
                    bestScore: 0,
                    streak: 0,
                    testHistory: []
                };
                
                localStorage.setItem('currentUser', JSON.stringify(currentUser));
                localStorage.setItem(`userStats_${email}`, JSON.stringify(userStats));
                
                showNotification('Account created successfully! Welcome!', 'success');
                showDashboard();
                
                // Reset button
                btn.disabled = false;
                btnText.classList.remove('hidden');
                btnLoader.classList.add('hidden');
            }, 2000);
        }

        async function handleForgotPassword(event) {
            event.preventDefault();
            soundSystem.playClickSound();
            
            const email = document.getElementById('forgot-email').value;
            
            // Show loading
            const btn = event.target.querySelector('.auth-btn');
            const btnText = btn.querySelector('.btn-text');
            const btnLoader = btn.querySelector('.btn-loader');
            
            btn.disabled = true;
            btnText.classList.add('hidden');
            btnLoader.classList.remove('hidden');
            
            // Simulate API call
            setTimeout(() => {
                showNotification('Password reset link sent to your email!', 'success');
                showLogin();
                
                // Reset button
                btn.disabled = false;
                btnText.classList.remove('hidden');
                btnLoader.classList.add('hidden');
            }, 1500);
        }



        function showTerms() {
            soundSystem.playClickSound();
            showNotification('Terms & Conditions modal will be implemented', 'info');
        }

        function showProfile() {
            soundSystem.playClickSound();
            showNotification('Profile settings will be implemented', 'info');
        }

        function logout() {
            soundSystem.playClickSound();
            currentUser = null;
            localStorage.removeItem('currentUser');
            showNotification('Logged out successfully!', 'success');
            document.getElementById('auth-container').style.display = 'flex';
            showAuthContainer();
            showLogin();
        }

        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <div class="notification-content">
                    <span class="notification-icon">${type === 'success' ? '✅' : type === 'error' ? '❌' : 'ℹ️'}</span>
                    <span class="notification-message">${message}</span>
                </div>
            `;
            
            // Add styles
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'success' ? '#d4edda' : type === 'error' ? '#f8d7da' : '#d1ecf1'};
                color: ${type === 'success' ? '#155724' : type === 'error' ? '#721c24' : '#0c5460'};
                border: 1px solid ${type === 'success' ? '#c3e6cb' : type === 'error' ? '#f5c6cb' : '#bee5eb'};
                border-radius: 8px;
                padding: 15px 20px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 10000;
                animation: slideInRight 0.3s ease-out;
                max-width: 350px;
                font-size: 0.9rem;
            `;
            
            document.body.appendChild(notification);
            
            // Remove after 4 seconds
            setTimeout(() => {
                notification.style.animation = 'slideOutRight 0.3s ease-out';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, 4000);
        }

        // Add notification animations to CSS
        const notificationStyles = document.createElement('style');
        notificationStyles.textContent = `
            @keyframes slideInRight {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
            
            @keyframes slideOutRight {
                from {
                    transform: translateX(0);
                    opacity: 1;
                }
                to {
                    transform: translateX(100%);
                    opacity: 0;
                }
            }
            
            .notification-content {
                display: flex;
                align-items: center;
                gap: 10px;
            }
            
            .notification-icon {
                font-size: 1.1rem;
            }
        `;
        document.head.appendChild(notificationStyles);

        // Update the existing startQuiz function to work with authentication
        function startQuizWithAuth(topic, startIndex = 0, questionCount = null) {
            if (!currentUser) {
                showNotification('Please login to start taking quizzes', 'error');
                return;
            }
            
            // Hide dashboard and show topic selection
            document.getElementById('user-dashboard').classList.add('hidden');
            document.getElementById('topic-selection').classList.remove('hidden');
        }

        // Add button to dashboard to start quiz
        function startPractice() {
            soundSystem.playClickSound();
            document.getElementById('user-dashboard').classList.add('hidden');
            document.getElementById('topic-selection').classList.remove('hidden');
        }

        // Quiz data with 10,000 unique SSC questions (2017-2025) - 2000 per topic
        function generateQuizData() {
            // Comprehensive word databases
            const synonymsData = {
                "ABUNDANT": { correct: "Plentiful", wrong: ["Scarce", "Limited", "Rare"] },
                "METICULOUS": { correct: "Careful", wrong: ["Careless", "Hasty", "Rough"] },
                "CANDID": { correct: "Frank", wrong: ["Dishonest", "Secretive", "Deceptive"] },
                "PRISTINE": { correct: "Pure", wrong: ["Dirty", "Contaminated", "Polluted"] },
                "ELOQUENT": { correct: "Fluent", wrong: ["Inarticulate", "Stammering", "Silent"] },
                "BENEVOLENT": { correct: "Kind", wrong: ["Cruel", "Harsh", "Selfish"] },
                "ARDUOUS": { correct: "Difficult", wrong: ["Easy", "Simple", "Pleasant"] },
                "LUCID": { correct: "Clear", wrong: ["Confusing", "Vague", "Ambiguous"] },
                "TENACIOUS": { correct: "Persistent", wrong: ["Weak", "Giving up", "Lazy"] },
                "VIVACIOUS": { correct: "Lively", wrong: ["Dull", "Boring", "Tired"] },
                "FRUGAL": { correct: "Economical", wrong: ["Wasteful", "Extravagant", "Lavish"] },
                "SERENE": { correct: "Peaceful", wrong: ["Agitated", "Disturbed", "Chaotic"] },
                "ASTUTE": { correct: "Shrewd", wrong: ["Foolish", "Naive", "Ignorant"] },
                "GREGARIOUS": { correct: "Sociable", wrong: ["Antisocial", "Lonely", "Isolated"] },
                "EPHEMERAL": { correct: "Temporary", wrong: ["Permanent", "Lasting", "Eternal"] },
                "UBIQUITOUS": { correct: "Omnipresent", wrong: ["Rare", "Absent", "Limited"] },
                "MAGNANIMOUS": { correct: "Generous", wrong: ["Petty", "Selfish", "Mean"] },
                "PENSIVE": { correct: "Thoughtful", wrong: ["Thoughtless", "Careless", "Reckless"] },
                "RESILIENT": { correct: "Tough", wrong: ["Fragile", "Weak", "Brittle"] },
                "ZEALOUS": { correct: "Enthusiastic", wrong: ["Indifferent", "Apathetic", "Lazy"] },
                "ADROIT": { correct: "Skillful", wrong: ["Clumsy", "Awkward", "Inept"] },
                "AFFABLE": { correct: "Friendly", wrong: ["Unfriendly", "Hostile", "Rude"] },
                "ALACRITY": { correct: "Eagerness", wrong: ["Reluctance", "Hesitation", "Delay"] },
                "AMBIGUOUS": { correct: "Unclear", wrong: ["Clear", "Obvious", "Definite"] },
                "AMIABLE": { correct: "Pleasant", wrong: ["Unpleasant", "Disagreeable", "Hostile"] },
                "AMPLE": { correct: "Sufficient", wrong: ["Insufficient", "Inadequate", "Scarce"] },
                "ANIMATED": { correct: "Lively", wrong: ["Lifeless", "Dull", "Boring"] },
                "ANTIQUATED": { correct: "Outdated", wrong: ["Modern", "Current", "New"] },
                "APPREHENSIVE": { correct: "Anxious", wrong: ["Confident", "Calm", "Relaxed"] },
                "ARBITRARY": { correct: "Random", wrong: ["Systematic", "Planned", "Organized"] },
                "ARTICULATE": { correct: "Eloquent", wrong: ["Inarticulate", "Unclear", "Mumbling"] },
                "ASCETIC": { correct: "Austere", wrong: ["Indulgent", "Luxurious", "Extravagant"] },
                "ASSIDUOUS": { correct: "Diligent", wrong: ["Lazy", "Careless", "Negligent"] },
                "AUDACIOUS": { correct: "Bold", wrong: ["Timid", "Cautious", "Fearful"] },
                "AUSTERE": { correct: "Severe", wrong: ["Lenient", "Indulgent", "Permissive"] },
                "AUTHENTIC": { correct: "Genuine", wrong: ["Fake", "False", "Artificial"] },
                "AVARICIOUS": { correct: "Greedy", wrong: ["Generous", "Charitable", "Giving"] },
                "BANAL": { correct: "Commonplace", wrong: ["Original", "Unique", "Creative"] },
                "BELLIGERENT": { correct: "Aggressive", wrong: ["Peaceful", "Calm", "Gentle"] },
                "BENIGN": { correct: "Harmless", wrong: ["Harmful", "Dangerous", "Malicious"] },
                "BIZARRE": { correct: "Strange", wrong: ["Normal", "Ordinary", "Common"] },
                "BLATANT": { correct: "Obvious", wrong: ["Subtle", "Hidden", "Concealed"] },
                "BOISTEROUS": { correct: "Noisy", wrong: ["Quiet", "Silent", "Peaceful"] },
                "BREVITY": { correct: "Conciseness", wrong: ["Verbosity", "Lengthiness", "Wordiness"] },
                "CALLOUS": { correct: "Insensitive", wrong: ["Sensitive", "Caring", "Compassionate"] },
                "CAPRICIOUS": { correct: "Unpredictable", wrong: ["Predictable", "Consistent", "Stable"] },
                "CAUSTIC": { correct: "Harsh", wrong: ["Gentle", "Mild", "Soothing"] },
                "CENSURE": { correct: "Criticize", wrong: ["Praise", "Commend", "Approve"] },
                "CHAGRIN": { correct: "Embarrassment", wrong: ["Pride", "Satisfaction", "Joy"] },
                "CHARLATAN": { correct: "Fraud", wrong: ["Expert", "Professional", "Genuine"] },
                "CIRCUMSPECT": { correct: "Cautious", wrong: ["Reckless", "Careless", "Impulsive"] },
                "COERCE": { correct: "Force", wrong: ["Persuade", "Encourage", "Request"] },
                "COGENT": { correct: "Convincing", wrong: ["Unconvincing", "Weak", "Flawed"] },
                "COHERENT": { correct: "Logical", wrong: ["Illogical", "Confused", "Disorganized"] }
            };

            const antonymsData = {
                "OPTIMISTIC": { correct: "Pessimistic", wrong: ["Hopeful", "Confident", "Positive"] },
                "GENEROUS": { correct: "Stingy", wrong: ["Kind", "Giving", "Charitable"] },
                "TRANSPARENT": { correct: "Opaque", wrong: ["Clear", "Visible", "Obvious"] },
                "HARMONY": { correct: "Discord", wrong: ["Peace", "Unity", "Agreement"] },
                "EXPAND": { correct: "Contract", wrong: ["Grow", "Increase", "Enlarge"] },
                "COURAGE": { correct: "Cowardice", wrong: ["Bravery", "Valor", "Boldness"] },
                "ANCIENT": { correct: "Modern", wrong: ["Old", "Historic", "Aged"] },
                "VICTORY": { correct: "Defeat", wrong: ["Success", "Triumph", "Win"] },
                "GENUINE": { correct: "Fake", wrong: ["Real", "Authentic", "True"] },
                "PRAISE": { correct: "Criticize", wrong: ["Compliment", "Appreciate", "Admire"] },
                "ASCEND": { correct: "Descend", wrong: ["Rise", "Climb", "Mount"] },
                "FERTILE": { correct: "Barren", wrong: ["Productive", "Rich", "Fruitful"] },
                "HUMBLE": { correct: "Arrogant", wrong: ["Modest", "Meek", "Simple"] },
                "LIBERTY": { correct: "Captivity", wrong: ["Freedom", "Independence", "Rights"] },
                "PROSPERITY": { correct: "Poverty", wrong: ["Success", "Wealth", "Fortune"] },
                "RIGID": { correct: "Flexible", wrong: ["Stiff", "Hard", "Firm"] },
                "SHALLOW": { correct: "Deep", wrong: ["Surface", "Light", "Superficial"] },
                "TEMPORARY": { correct: "Permanent", wrong: ["Brief", "Short", "Momentary"] },
                "URBAN": { correct: "Rural", wrong: ["City", "Metropolitan", "Municipal"] },
                "VOLUNTARY": { correct: "Compulsory", wrong: ["Willing", "Optional", "Free"] },
                "ACCEPT": { correct: "Reject", wrong: ["Receive", "Welcome", "Embrace"] },
                "ADVANCE": { correct: "Retreat", wrong: ["Progress", "Move forward", "Proceed"] },
                "ADVANTAGE": { correct: "Disadvantage", wrong: ["Benefit", "Profit", "Gain"] },
                "AGREE": { correct: "Disagree", wrong: ["Consent", "Accept", "Approve"] },
                "ALIVE": { correct: "Dead", wrong: ["Living", "Breathing", "Existing"] },
                "ALLOW": { correct: "Forbid", wrong: ["Permit", "Enable", "Authorize"] },
                "AMATEUR": { correct: "Professional", wrong: ["Beginner", "Novice", "Inexperienced"] },
                "ANGRY": { correct: "Calm", wrong: ["Furious", "Mad", "Irritated"] },
                "ARRIVE": { correct: "Depart", wrong: ["Come", "Reach", "Enter"] },
                "ARTIFICIAL": { correct: "Natural", wrong: ["Fake", "Synthetic", "Man-made"] },
                "ATTACK": { correct: "Defend", wrong: ["Assault", "Strike", "Charge"] },
                "BEAUTIFUL": { correct: "Ugly", wrong: ["Pretty", "Attractive", "Lovely"] },
                "BEGIN": { correct: "End", wrong: ["Start", "Commence", "Initiate"] },
                "BENEFIT": { correct: "Harm", wrong: ["Advantage", "Profit", "Gain"] },
                "BITTER": { correct: "Sweet", wrong: ["Sour", "Harsh", "Unpleasant"] },
                "BOLD": { correct: "Timid", wrong: ["Brave", "Courageous", "Daring"] },
                "BRIGHT": { correct: "Dark", wrong: ["Light", "Brilliant", "Shining"] },
                "BROAD": { correct: "Narrow", wrong: ["Wide", "Extensive", "Large"] },
                "CALM": { correct: "Agitated", wrong: ["Peaceful", "Quiet", "Serene"] },
                "CAREFUL": { correct: "Careless", wrong: ["Cautious", "Attentive", "Thorough"] },
                "CERTAIN": { correct: "Uncertain", wrong: ["Sure", "Definite", "Positive"] },
                "CHEAP": { correct: "Expensive", wrong: ["Inexpensive", "Affordable", "Low-cost"] },
                "CLEAN": { correct: "Dirty", wrong: ["Pure", "Spotless", "Hygienic"] },
                "CLEAR": { correct: "Unclear", wrong: ["Obvious", "Transparent", "Plain"] },
                "CLOSE": { correct: "Open", wrong: ["Near", "Shut", "Sealed"] },
                "COLD": { correct: "Hot", wrong: ["Cool", "Chilly", "Freezing"] },
                "COMMON": { correct: "Rare", wrong: ["Usual", "Ordinary", "Typical"] },
                "COMPLETE": { correct: "Incomplete", wrong: ["Finished", "Whole", "Total"] },
                "COMPLEX": { correct: "Simple", wrong: ["Complicated", "Difficult", "Intricate"] },
                "CONFIDENT": { correct: "Insecure", wrong: ["Sure", "Certain", "Assured"] },
                "CONNECT": { correct: "Disconnect", wrong: ["Link", "Join", "Attach"] },
                "CONSCIOUS": { correct: "Unconscious", wrong: ["Aware", "Alert", "Awake"] },
                "CONSTRUCT": { correct: "Destroy", wrong: ["Build", "Create", "Make"] },
                "CONTINUE": { correct: "Stop", wrong: ["Proceed", "Persist", "Carry on"] },
                "CORRECT": { correct: "Incorrect", wrong: ["Right", "Accurate", "Proper"] }
            };

            const idiomsData = [
                { phrase: "Break the ice", correct: "To start a conversation", wrong: ["To break something", "To be cold", "To stop working"] },
                { phrase: "Bite the bullet", correct: "To face difficulty bravely", wrong: ["To eat metal", "To be angry", "To shoot someone"] },
                { phrase: "Spill the beans", correct: "To reveal a secret", wrong: ["To cook food", "To make a mess", "To plant seeds"] },
                { phrase: "Hit the nail on the head", correct: "To be exactly right", wrong: ["To use a hammer", "To hurt someone", "To build something"] },
                { phrase: "Let the cat out of the bag", correct: "To reveal a secret", wrong: ["To free an animal", "To be cruel", "To go shopping"] },
                { phrase: "Burn the midnight oil", correct: "To work late at night", wrong: ["To waste fuel", "To start a fire", "To be wasteful"] },
                { phrase: "A piece of cake", correct: "Something very easy", wrong: ["A dessert", "Food item", "A celebration"] },
                { phrase: "Cost an arm and a leg", correct: "To be very expensive", wrong: ["To be injured", "To be painful", "To be dangerous"] },
                { phrase: "Once in a blue moon", correct: "Very rarely", wrong: ["At night", "Every month", "When it's cold"] },
                { phrase: "Kill two birds with one stone", correct: "To accomplish two things at once", wrong: ["To hunt birds", "To be violent", "To be efficient"] },
                { phrase: "The ball is in your court", correct: "It's your decision", wrong: ["Playing sports", "You're in trouble", "You're winning"] },
                { phrase: "Don't cry over spilled milk", correct: "Don't regret past mistakes", wrong: ["Don't waste food", "Clean up messes", "Be careful"] },
                { phrase: "Actions speak louder than words", correct: "What you do matters more than what you say", wrong: ["Be quiet", "Speak softly", "Actions are noisy"] },
                { phrase: "Barking up the wrong tree", correct: "Making a mistake", wrong: ["Training dogs", "Climbing trees", "Being loud"] },
                { phrase: "Don't put all your eggs in one basket", correct: "Don't risk everything on one thing", wrong: ["Be careful with eggs", "Go shopping", "Cook carefully"] },
                { phrase: "Every cloud has a silver lining", correct: "There's something good in every bad situation", wrong: ["Weather prediction", "Clouds are pretty", "It will rain"] },
                { phrase: "Rome wasn't built in a day", correct: "Good things take time", wrong: ["History lesson", "Travel is slow", "Building is hard"] },
                { phrase: "When pigs fly", correct: "Never", wrong: ["Animals can fly", "In the future", "It's impossible"] },
                { phrase: "You can't judge a book by its cover", correct: "Don't judge by appearance", wrong: ["Don't read books", "Books are important", "Covers are pretty"] },
                { phrase: "The early bird catches the worm", correct: "Success comes to those who start early", wrong: ["Birds eat worms", "Wake up early", "Hunting is good"] },
                { phrase: "Better late than never", correct: "It's better to do something late than not at all", wrong: ["Time is important", "Being punctual", "Speed matters"] },
                { phrase: "Don't count your chickens before they hatch", correct: "Don't assume success before it happens", wrong: ["Farming advice", "Count carefully", "Be patient"] },
                { phrase: "A bird in the hand is worth two in the bush", correct: "Something certain is better than something uncertain", wrong: ["Bird watching", "Hunting tips", "Nature advice"] },
                { phrase: "The grass is always greener on the other side", correct: "Other people's situations seem better", wrong: ["Gardening advice", "Grass care", "Color perception"] },
                { phrase: "Don't bite the hand that feeds you", correct: "Don't harm those who help you", wrong: ["Eating manners", "Pet training", "Being grateful"] }
            ];

            const oneWordSubsData = [
                { definition: "One who studies insects", correct: "Entomologist", wrong: ["Botanist", "Zoologist", "Biologist"] },
                { definition: "A person who loves books", correct: "Bibliophile", wrong: ["Philosopher", "Scholar", "Reader"] },
                { definition: "Fear of heights", correct: "Acrophobia", wrong: ["Claustrophobia", "Agoraphobia", "Hydrophobia"] },
                { definition: "A government by the people", correct: "Democracy", wrong: ["Autocracy", "Monarchy", "Oligarchy"] },
                { definition: "One who cannot read or write", correct: "Illiterate", wrong: ["Literate", "Scholar", "Student"] },
                { definition: "A place where birds are kept", correct: "Aviary", wrong: ["Zoo", "Aquarium", "Stable"] },
                { definition: "One who eats human flesh", correct: "Cannibal", wrong: ["Vegetarian", "Carnivore", "Omnivore"] },
                { definition: "A person who speaks many languages", correct: "Polyglot", wrong: ["Monolingual", "Translator", "Interpreter"] },
                { definition: "The study of earthquakes", correct: "Seismology", wrong: ["Geology", "Geography", "Meteorology"] },
                { definition: "A person who hates mankind", correct: "Misanthropist", wrong: ["Philanthropist", "Optimist", "Pessimist"] },
                { definition: "A medicine that kills germs", correct: "Antiseptic", wrong: ["Antibiotic", "Anesthetic", "Antidote"] },
                { definition: "One who walks in sleep", correct: "Somnambulist", wrong: ["Insomniac", "Dreamer", "Sleeper"] },
                { definition: "A person who believes in God", correct: "Theist", wrong: ["Atheist", "Agnostic", "Believer"] },
                { definition: "The art of beautiful handwriting", correct: "Calligraphy", wrong: ["Typography", "Stenography", "Biography"] },
                { definition: "A person who draws maps", correct: "Cartographer", wrong: ["Geographer", "Photographer", "Artist"] },
                { definition: "Fear of water", correct: "Hydrophobia", wrong: ["Acrophobia", "Claustrophobia", "Agoraphobia"] },
                { definition: "A person who collects coins", correct: "Numismatist", wrong: ["Philatelist", "Collector", "Hobbyist"] },
                { definition: "The study of stars and planets", correct: "Astronomy", wrong: ["Astrology", "Geography", "Geology"] },
                { definition: "A person who never tells lies", correct: "Veracious", wrong: ["Honest", "Truthful", "Sincere"] },
                { definition: "A place where weapons are stored", correct: "Arsenal", wrong: ["Armory", "Warehouse", "Store"] },
                { definition: "One who studies the mind", correct: "Psychologist", wrong: ["Psychiatrist", "Neurologist", "Therapist"] },
                { definition: "A person who treats animals", correct: "Veterinarian", wrong: ["Zoologist", "Biologist", "Farmer"] },
                { definition: "One who studies weather", correct: "Meteorologist", wrong: ["Geologist", "Climatologist", "Astronomer"] },
                { definition: "A person who cuts hair", correct: "Barber", wrong: ["Stylist", "Beautician", "Hairdresser"] },
                { definition: "One who makes shoes", correct: "Cobbler", wrong: ["Tailor", "Carpenter", "Blacksmith"] }
            ];

            const spellingWordsData = [
                { correct: "Accommodate", wrong: ["Accomodate", "Acommodate", "Acomodate"] },
                { correct: "Believe", wrong: ["Beleive", "Belive", "Beleave"] },
                { correct: "Receive", wrong: ["Recieve", "Receve", "Receave"] },
                { correct: "Definitely", wrong: ["Definately", "Definitly", "Definatly"] },
                { correct: "Separate", wrong: ["Seperate", "Seprate", "Separete"] },
                { correct: "Occurrence", wrong: ["Occurance", "Occurence", "Occurrance"] },
                { correct: "Embarrass", wrong: ["Embarass", "Embarras", "Embaress"] },
                { correct: "Necessary", wrong: ["Necesary", "Neccessary", "Necessery"] },
                { correct: "Privilege", wrong: ["Priviledge", "Privilage", "Previlege"] },
                { correct: "Maintenance", wrong: ["Maintainance", "Maintenence", "Maintanance"] },
                { correct: "Conscientious", wrong: ["Conscientous", "Consciencious", "Conscientous"] },
                { correct: "Acquaintance", wrong: ["Acquaintence", "Acquaintanse", "Acquaintence"] },
                { correct: "Independent", wrong: ["Independant", "Independet", "Independant"] },
                { correct: "Recommend", wrong: ["Recomend", "Reccomend", "Recomand"] },
                { correct: "Beginning", wrong: ["Begining", "Begginning", "Beginng"] },
                { correct: "Committee", wrong: ["Comittee", "Commitee", "Comitee"] },
                { correct: "Professional", wrong: ["Profesional", "Proffessional", "Profesional"] },
                { correct: "Business", wrong: ["Buisness", "Bussiness", "Busines"] },
                { correct: "Calendar", wrong: ["Calender", "Calander", "Calender"] },
                { correct: "Exercise", wrong: ["Excercise", "Exersise", "Excersise"] },
                { correct: "Achievement", wrong: ["Acheivment", "Achievment", "Acheivement"] },
                { correct: "Acknowledgment", wrong: ["Acknowledgement", "Acknowlegment", "Aknowledgment"] },
                { correct: "Acquire", wrong: ["Aquire", "Accquire", "Aquire"] },
                { correct: "Address", wrong: ["Adress", "Addres", "Adres"] },
                { correct: "Aggressive", wrong: ["Agressive", "Aggresive", "Agresive"] }
            ];

            // Shuffle function
            function shuffleArray(array) {
                const shuffled = [...array];
                for (let i = shuffled.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
                }
                return shuffled;
            }

            const quizData = [];

            // Generate Synonyms (2000 questions)
            const synonymKeys = Object.keys(synonymsData);
            for (let i = 0; i < 2000; i++) {
                const word = synonymKeys[i % synonymKeys.length];
                const data = synonymsData[word];
                const allOptions = [data.correct, ...data.wrong];
                const shuffledOptions = shuffleArray(allOptions);
                const correctIndex = shuffledOptions.indexOf(data.correct);
                
                quizData.push({
                    topic: "Synonyms",
                    question: `Choose the synonym of '${word}':`,
                    options: shuffledOptions,
                    correct: correctIndex
                });
            }

            // Generate Antonyms (2000 questions)
            const antonymKeys = Object.keys(antonymsData);
            for (let i = 0; i < 2000; i++) {
                const word = antonymKeys[i % antonymKeys.length];
                const data = antonymsData[word];
                const allOptions = [data.correct, ...data.wrong];
                const shuffledOptions = shuffleArray(allOptions);
                const correctIndex = shuffledOptions.indexOf(data.correct);
                
                quizData.push({
                    topic: "Antonyms",
                    question: `Choose the antonym of '${word}':`,
                    options: shuffledOptions,
                    correct: correctIndex
                });
            }

            // Generate Idioms (2000 questions)
            for (let i = 0; i < 2000; i++) {
                const idiom = idiomsData[i % idiomsData.length];
                const allOptions = [idiom.correct, ...idiom.wrong];
                const shuffledOptions = shuffleArray(allOptions);
                const correctIndex = shuffledOptions.indexOf(idiom.correct);
                
                quizData.push({
                    topic: "Idioms",
                    question: `What does '${idiom.phrase}' mean?`,
                    options: shuffledOptions,
                    correct: correctIndex
                });
            }

            // Generate One Word Substitutions (2000 questions)
            for (let i = 0; i < 2000; i++) {
                const sub = oneWordSubsData[i % oneWordSubsData.length];
                const allOptions = [sub.correct, ...sub.wrong];
                const shuffledOptions = shuffleArray(allOptions);
                const correctIndex = shuffledOptions.indexOf(sub.correct);
                
                quizData.push({
                    topic: "One Word Substitutions",
                    question: sub.definition + ":",
                    options: shuffledOptions,
                    correct: correctIndex
                });
            }

            // Generate Spellings (2000 questions)
            for (let i = 0; i < 2000; i++) {
                const spelling = spellingWordsData[i % spellingWordsData.length];
                const allOptions = [spelling.correct, ...spelling.wrong];
                const shuffledOptions = shuffleArray(allOptions);
                const correctIndex = shuffledOptions.indexOf(spelling.correct);
                
                quizData.push({
                    topic: "Spellings",
                    question: "Choose the correctly spelled word:",
                    options: shuffledOptions,
                    correct: correctIndex
                });
            }

            return quizData;
        }

        const allQuizData = generateQuizData();
        
        let currentQuizData = [];
        let selectedTopic = '';
        let currentQuestion = 0;
        let score = 0;
        let selectedAnswer = null;
        let userAnswers = [];
        let topicScores = {
            "Synonyms": { correct: 0, total: 0 },
            "Antonyms": { correct: 0, total: 0 },
            "Idioms": { correct: 0, total: 0 },
            "One Word Substitutions": { correct: 0, total: 0 },
            "Spellings": { correct: 0, total: 0 }
        };

        function showSubtopics(topic) {
            soundSystem.playClickSound();
            document.getElementById('topic-selection').classList.add('hidden');
            document.getElementById('subtopic-selection').classList.remove('hidden');
            document.getElementById('subtopic-title').textContent = `${topic} Practice Sets`;
            
            const subtopicsGrid = document.getElementById('subtopics-grid');
            subtopicsGrid.innerHTML = '';
            
            // Create 40 sets of 50 questions each
            for (let i = 0; i < 40; i++) {
                const startIndex = i * 50;
                const endIndex = startIndex + 50;
                
                const card = document.createElement('div');
                card.className = 'subtopic-card';
                card.onclick = () => {
                    soundSystem.playClickSound();
                    startQuiz(topic, startIndex, 50);
                };
                
                let difficulty = '';
                let difficultyClass = '';
                if (i < 13) {
                    difficulty = 'Basic';
                    difficultyClass = 'difficulty-basic';
                } else if (i < 27) {
                    difficulty = 'Intermediate';
                    difficultyClass = 'difficulty-intermediate';
                } else {
                    difficulty = 'Advanced';
                    difficultyClass = 'difficulty-advanced';
                }
                
                card.innerHTML = `
                    <div class="subtopic-number">Set ${i + 1}</div>
                    <div class="subtopic-name">${topic}</div>
                    <div class="subtopic-range">Questions ${startIndex + 1}-${endIndex}</div>
                    <div class="subtopic-difficulty ${difficultyClass}">${difficulty}</div>
                `;
                
                subtopicsGrid.appendChild(card);
            }
        }

        function backToMainTopics() {
            soundSystem.playClickSound();
            document.getElementById('subtopic-selection').classList.add('hidden');
            document.getElementById('topic-selection').classList.remove('hidden');
        }

        function startQuiz(topic, startIndex = 0, questionCount = null) {
            soundSystem.playClickSound();
            selectedTopic = topic;
            
            if (topic === 'Mixed') {
                currentQuizData = [...allQuizData];
            } else {
                const topicQuestions = allQuizData.filter(q => q.topic === topic);
                if (questionCount) {
                    currentQuizData = topicQuestions.slice(startIndex, startIndex + questionCount);
                } else {
                    currentQuizData = topicQuestions;
                }
            }
            
            // Reset quiz state
            currentQuestion = 0;
            score = 0;
            selectedAnswer = null;
            userAnswers = [];
            topicScores = {
                "Synonyms": { correct: 0, total: 0 },
                "Antonyms": { correct: 0, total: 0 },
                "Idioms": { correct: 0, total: 0 },
                "One Word Substitutions": { correct: 0, total: 0 },
                "Spellings": { correct: 0, total: 0 }
            };
            
            // Show quiz content and hide selections
            document.getElementById('topic-selection').classList.add('hidden');
            document.getElementById('subtopic-selection').classList.add('hidden');
            document.getElementById('quiz-content').classList.remove('hidden');
            
            loadQuestion();
        }

        function backToTopics() {
            soundSystem.playClickSound();
            document.getElementById('quiz-content').classList.add('hidden');
            document.getElementById('result-section').classList.add('hidden');
            document.getElementById('subtopic-selection').classList.add('hidden');
            document.getElementById('topic-selection').classList.remove('hidden');
        }

        function loadQuestion() {
            const question = currentQuizData[currentQuestion];
            document.getElementById('question-text').textContent = question.question;
            document.getElementById('current-topic').textContent = selectedTopic === 'Mixed' ? question.topic : selectedTopic;
            document.getElementById('question-counter').textContent = `Question ${currentQuestion + 1} of ${currentQuizData.length}`;
            
            const progressPercent = ((currentQuestion + 1) / currentQuizData.length) * 100;
            document.getElementById('progress-fill').style.width = progressPercent + '%';
            
            const optionsGrid = document.getElementById('options-grid');
            optionsGrid.innerHTML = '';
            
            question.options.forEach((option, index) => {
                const button = document.createElement('button');
                button.className = 'option-btn';
                button.textContent = option;
                button.onclick = () => selectAnswer(index);
                optionsGrid.appendChild(button);
            });
            
            // Check if this question was already answered
            if (userAnswers[currentQuestion]) {
                const previousAnswer = userAnswers[currentQuestion];
                selectedAnswer = previousAnswer.selected;
                
                const buttons = document.querySelectorAll('.option-btn');
                buttons.forEach((btn, i) => {
                    if (i === previousAnswer.correct) {
                        btn.classList.add('correct');
                    } else if (i === previousAnswer.selected && !previousAnswer.isCorrect) {
                        btn.classList.add('incorrect');
                    }
                    btn.onclick = null; // Disable clicking for answered questions
                });
            } else {
                selectedAnswer = null;
            }
            
            updateButtons();
            updateScore();
        }

        function selectAnswer(index) {
            if (selectedAnswer !== null) return; // Prevent multiple selections
            
            selectedAnswer = index;
            const question = currentQuizData[currentQuestion];
            const isCorrect = selectedAnswer === question.correct;
            
            // Play sound effect immediately
            if (isCorrect) {
                soundSystem.playCorrectSound();
            } else {
                soundSystem.playIncorrectSound();
            }
            
            // Update scores immediately
            userAnswers[currentQuestion] = {
                selected: selectedAnswer,
                correct: question.correct,
                isCorrect: isCorrect
            };
            
            topicScores[question.topic].total++;
            if (isCorrect) {
                score++;
                topicScores[question.topic].correct++;
            }
            
            // Show immediate feedback
            const buttons = document.querySelectorAll('.option-btn');
            buttons.forEach((btn, i) => {
                if (i === question.correct) {
                    btn.classList.add('correct');
                } else if (i === selectedAnswer && !isCorrect) {
                    btn.classList.add('incorrect');
                }
                btn.onclick = null; // Disable further clicking
            });
            
            updateScore();
        }

        function nextQuestion() {
            soundSystem.playClickSound();
            currentQuestion++;
            if (currentQuestion < currentQuizData.length) {
                loadQuestion();
            } else {
                showResults();
            }
        }

        function previousQuestion() {
            soundSystem.playClickSound();
            if (currentQuestion > 0) {
                currentQuestion--;
                loadQuestion();
            }
        }

        function updateButtons() {
            document.getElementById('prev-btn').style.display = currentQuestion === 0 ? 'none' : 'inline-block';
            document.getElementById('next-btn').textContent = currentQuestion === currentQuizData.length - 1 ? 'Finish Quiz' : 'Next →';
        }

        function updateScore() {
            const answeredQuestions = userAnswers.filter(answer => answer !== undefined).length;
            document.getElementById('score-display').textContent = `${score}/${answeredQuestions}`;
        }

        function showResults() {
            // Play completion sound
            soundSystem.playCompletionSound();
            
            document.getElementById('quiz-content').classList.add('hidden');
            document.getElementById('result-section').classList.remove('hidden');
            
            const answeredQuestions = userAnswers.filter(answer => answer !== undefined).length;
            const percentage = answeredQuestions > 0 ? Math.round((score / answeredQuestions) * 100) : 0;
            document.getElementById('final-score').textContent = `${score}/${answeredQuestions} (${percentage}%)`;
            
            // Save test results if user is logged in
            if (currentUser) {
                const testResult = {
                    topic: selectedTopic,
                    score: score,
                    questionsAnswered: answeredQuestions,
                    percentage: percentage,
                    date: new Date().toISOString(),
                    topicBreakdown: { ...topicScores }
                };
                
                // Update user stats
                userStats.totalTests++;
                userStats.totalScore += percentage;
                if (percentage > userStats.bestScore) {
                    userStats.bestScore = percentage;
                }
                
                // Update streak (simplified - in real app, check if test was taken today)
                if (percentage >= 70) {
                    userStats.streak++;
                } else {
                    userStats.streak = 0;
                }
                
                userStats.testHistory.push(testResult);
                
                // Save to localStorage (in real app, save to Firebase)
                localStorage.setItem(`userStats_${currentUser.email}`, JSON.stringify(userStats));
                
                showNotification('Test results saved to your profile!', 'success');
            }
            
            let message = '';
            if (percentage >= 90) message = '🏆 Outstanding! You\'re an English vocabulary expert!';
            else if (percentage >= 80) message = '🎉 Excellent work! You have a strong vocabulary!';
            else if (percentage >= 70) message = '👏 Good job! Keep practicing to improve further!';
            else if (percentage >= 60) message = '👍 Not bad! There\'s room for improvement!';
            else message = '📚 Keep studying! Practice makes perfect!';
            
            document.getElementById('result-message').textContent = message;
            
            // Show topic breakdown
            const breakdown = document.getElementById('topic-breakdown');
            breakdown.innerHTML = '';
            
            if (selectedTopic === 'Mixed') {
                // Show all topics for mixed practice
                Object.keys(topicScores).forEach(topic => {
                    if (topicScores[topic].total > 0) {
                        const card = document.createElement('div');
                        card.className = 'topic-card';
                        const percentage = Math.round((topicScores[topic].correct / topicScores[topic].total) * 100);
                        card.innerHTML = `
                            <div class="topic-name">${topic}</div>
                            <div class="topic-score">${topicScores[topic].correct}/${topicScores[topic].total} (${percentage}%)</div>
                        `;
                        breakdown.appendChild(card);
                    }
                });
            } else {
                // Show only selected topic
                const card = document.createElement('div');
                card.className = 'topic-card';
                const topicData = topicScores[selectedTopic];
                const percentage = topicData.total > 0 ? Math.round((topicData.correct / topicData.total) * 100) : 0;
                card.innerHTML = `
                    <div class="topic-name">${selectedTopic}</div>
                    <div class="topic-score">${topicData.correct}/${topicData.total} (${percentage}%)</div>
                `;
                breakdown.appendChild(card);
            }
        }

        function restartQuiz() {
            soundSystem.playClickSound();
            backToTopics();
        }

        function backToDashboard() {
            soundSystem.playClickSound();
            if (currentUser) {
                showDashboard();
            } else {
                showAuthContainer();
            }
        }

        // Add click sound to topic cards
        document.addEventListener('DOMContentLoaded', function() {
            // Add click sounds to all topic cards
            const topicCards = document.querySelectorAll('.topic-card-select');
            topicCards.forEach(card => {
                const originalOnClick = card.onclick;
                card.onclick = function() {
                    soundSystem.playClickSound();
                    if (originalOnClick) originalOnClick.call(this);
                };
            });
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'967ce92c151559c3',t:'MTc1Mzk2Mjk2OS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
